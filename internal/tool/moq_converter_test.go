// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tool_test

import (
	"sync"
)

// converterMock is a mock implementation of tool.converter.
//
//	func TestSomethingThatUsesconverter(t *testing.T) {
//
//		// make and configure a mocked tool.converter
//		mockedconverter := &converterMock{
//			HTML2MDFunc: func(raw []byte) (string, error) {
//				panic("mock out the HTML2MD method")
//			},
//			PDF2TextFunc: func(raw []byte) (string, error) {
//				panic("mock out the PDF2Text method")
//			},
//		}
//
//		// use mockedconverter in code that requires tool.converter
//		// and then make assertions.
//
//	}
type converterMock struct {
	// HTML2MDFunc mocks the HTML2MD method.
	HTML2MDFunc func(raw []byte) (string, error)

	// PDF2TextFunc mocks the PDF2Text method.
	PDF2TextFunc func(raw []byte) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// HTML2MD holds details about calls to the HTML2MD method.
		HTML2MD []struct {
			// Raw is the raw argument value.
			Raw []byte
		}
		// PDF2Text holds details about calls to the PDF2Text method.
		PDF2Text []struct {
			// Raw is the raw argument value.
			Raw []byte
		}
	}
	lockHTML2MD  sync.RWMutex
	lockPDF2Text sync.RWMutex
}

// HTML2MD calls HTML2MDFunc.
func (mock *converterMock) HTML2MD(raw []byte) (string, error) {
	if mock.HTML2MDFunc == nil {
		panic("converterMock.HTML2MDFunc: method is nil but converter.HTML2MD was just called")
	}
	callInfo := struct {
		Raw []byte
	}{
		Raw: raw,
	}
	mock.lockHTML2MD.Lock()
	mock.calls.HTML2MD = append(mock.calls.HTML2MD, callInfo)
	mock.lockHTML2MD.Unlock()
	return mock.HTML2MDFunc(raw)
}

// HTML2MDCalls gets all the calls that were made to HTML2MD.
// Check the length with:
//
//	len(mockedconverter.HTML2MDCalls())
func (mock *converterMock) HTML2MDCalls() []struct {
	Raw []byte
} {
	var calls []struct {
		Raw []byte
	}
	mock.lockHTML2MD.RLock()
	calls = mock.calls.HTML2MD
	mock.lockHTML2MD.RUnlock()
	return calls
}

// PDF2Text calls PDF2TextFunc.
func (mock *converterMock) PDF2Text(raw []byte) (string, error) {
	if mock.PDF2TextFunc == nil {
		panic("converterMock.PDF2TextFunc: method is nil but converter.PDF2Text was just called")
	}
	callInfo := struct {
		Raw []byte
	}{
		Raw: raw,
	}
	mock.lockPDF2Text.Lock()
	mock.calls.PDF2Text = append(mock.calls.PDF2Text, callInfo)
	mock.lockPDF2Text.Unlock()
	return mock.PDF2TextFunc(raw)
}

// PDF2TextCalls gets all the calls that were made to PDF2Text.
// Check the length with:
//
//	len(mockedconverter.PDF2TextCalls())
func (mock *converterMock) PDF2TextCalls() []struct {
	Raw []byte
} {
	var calls []struct {
		Raw []byte
	}
	mock.lockPDF2Text.RLock()
	calls = mock.calls.PDF2Text
	mock.lockPDF2Text.RUnlock()
	return calls
}
