// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tool_test

import (
	"context"
	"google.golang.org/api/gmail/v1"
	"sync"
)

// gmailSvcMock is a mock implementation of tool.gmailSvc.
//
//	func TestSomethingThatUsesgmailSvc(t *testing.T) {
//
//		// make and configure a mocked tool.gmailSvc
//		mockedgmailSvc := &gmailSvcMock{
//			GetAttachmentFunc: func(ctx context.Context, msgID string, attachmentID string) (*gmail.MessagePartBody, error) {
//				panic("mock out the GetAttachment method")
//			},
//			GetMessageFunc: func(ctx context.Context, msgID string) (*gmail.Message, error) {
//				panic("mock out the GetMessage method")
//			},
//			GetMessageMetadataFunc: func(ctx context.Context, msgID string) (*gmail.Message, error) {
//				panic("mock out the GetMessageMetadata method")
//			},
//			ListMessagesFunc: func(ctx context.Context, Q string, pageToken string, maxResults int64) (*gmail.ListMessagesResponse, error) {
//				panic("mock out the ListMessages method")
//			},
//		}
//
//		// use mockedgmailSvc in code that requires tool.gmailSvc
//		// and then make assertions.
//
//	}
type gmailSvcMock struct {
	// GetAttachmentFunc mocks the GetAttachment method.
	GetAttachmentFunc func(ctx context.Context, msgID string, attachmentID string) (*gmail.MessagePartBody, error)

	// GetMessageFunc mocks the GetMessage method.
	GetMessageFunc func(ctx context.Context, msgID string) (*gmail.Message, error)

	// GetMessageMetadataFunc mocks the GetMessageMetadata method.
	GetMessageMetadataFunc func(ctx context.Context, msgID string) (*gmail.Message, error)

	// ListMessagesFunc mocks the ListMessages method.
	ListMessagesFunc func(ctx context.Context, Q string, pageToken string, maxResults int64) (*gmail.ListMessagesResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAttachment holds details about calls to the GetAttachment method.
		GetAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MsgID is the msgID argument value.
			MsgID string
			// AttachmentID is the attachmentID argument value.
			AttachmentID string
		}
		// GetMessage holds details about calls to the GetMessage method.
		GetMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MsgID is the msgID argument value.
			MsgID string
		}
		// GetMessageMetadata holds details about calls to the GetMessageMetadata method.
		GetMessageMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MsgID is the msgID argument value.
			MsgID string
		}
		// ListMessages holds details about calls to the ListMessages method.
		ListMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Q is the Q argument value.
			Q string
			// PageToken is the pageToken argument value.
			PageToken string
			// MaxResults is the maxResults argument value.
			MaxResults int64
		}
	}
	lockGetAttachment      sync.RWMutex
	lockGetMessage         sync.RWMutex
	lockGetMessageMetadata sync.RWMutex
	lockListMessages       sync.RWMutex
}

// GetAttachment calls GetAttachmentFunc.
func (mock *gmailSvcMock) GetAttachment(ctx context.Context, msgID string, attachmentID string) (*gmail.MessagePartBody, error) {
	if mock.GetAttachmentFunc == nil {
		panic("gmailSvcMock.GetAttachmentFunc: method is nil but gmailSvc.GetAttachment was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		MsgID        string
		AttachmentID string
	}{
		Ctx:          ctx,
		MsgID:        msgID,
		AttachmentID: attachmentID,
	}
	mock.lockGetAttachment.Lock()
	mock.calls.GetAttachment = append(mock.calls.GetAttachment, callInfo)
	mock.lockGetAttachment.Unlock()
	return mock.GetAttachmentFunc(ctx, msgID, attachmentID)
}

// GetAttachmentCalls gets all the calls that were made to GetAttachment.
// Check the length with:
//
//	len(mockedgmailSvc.GetAttachmentCalls())
func (mock *gmailSvcMock) GetAttachmentCalls() []struct {
	Ctx          context.Context
	MsgID        string
	AttachmentID string
} {
	var calls []struct {
		Ctx          context.Context
		MsgID        string
		AttachmentID string
	}
	mock.lockGetAttachment.RLock()
	calls = mock.calls.GetAttachment
	mock.lockGetAttachment.RUnlock()
	return calls
}

// GetMessage calls GetMessageFunc.
func (mock *gmailSvcMock) GetMessage(ctx context.Context, msgID string) (*gmail.Message, error) {
	if mock.GetMessageFunc == nil {
		panic("gmailSvcMock.GetMessageFunc: method is nil but gmailSvc.GetMessage was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		MsgID string
	}{
		Ctx:   ctx,
		MsgID: msgID,
	}
	mock.lockGetMessage.Lock()
	mock.calls.GetMessage = append(mock.calls.GetMessage, callInfo)
	mock.lockGetMessage.Unlock()
	return mock.GetMessageFunc(ctx, msgID)
}

// GetMessageCalls gets all the calls that were made to GetMessage.
// Check the length with:
//
//	len(mockedgmailSvc.GetMessageCalls())
func (mock *gmailSvcMock) GetMessageCalls() []struct {
	Ctx   context.Context
	MsgID string
} {
	var calls []struct {
		Ctx   context.Context
		MsgID string
	}
	mock.lockGetMessage.RLock()
	calls = mock.calls.GetMessage
	mock.lockGetMessage.RUnlock()
	return calls
}

// GetMessageMetadata calls GetMessageMetadataFunc.
func (mock *gmailSvcMock) GetMessageMetadata(ctx context.Context, msgID string) (*gmail.Message, error) {
	if mock.GetMessageMetadataFunc == nil {
		panic("gmailSvcMock.GetMessageMetadataFunc: method is nil but gmailSvc.GetMessageMetadata was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		MsgID string
	}{
		Ctx:   ctx,
		MsgID: msgID,
	}
	mock.lockGetMessageMetadata.Lock()
	mock.calls.GetMessageMetadata = append(mock.calls.GetMessageMetadata, callInfo)
	mock.lockGetMessageMetadata.Unlock()
	return mock.GetMessageMetadataFunc(ctx, msgID)
}

// GetMessageMetadataCalls gets all the calls that were made to GetMessageMetadata.
// Check the length with:
//
//	len(mockedgmailSvc.GetMessageMetadataCalls())
func (mock *gmailSvcMock) GetMessageMetadataCalls() []struct {
	Ctx   context.Context
	MsgID string
} {
	var calls []struct {
		Ctx   context.Context
		MsgID string
	}
	mock.lockGetMessageMetadata.RLock()
	calls = mock.calls.GetMessageMetadata
	mock.lockGetMessageMetadata.RUnlock()
	return calls
}

// ListMessages calls ListMessagesFunc.
func (mock *gmailSvcMock) ListMessages(ctx context.Context, Q string, pageToken string, maxResults int64) (*gmail.ListMessagesResponse, error) {
	if mock.ListMessagesFunc == nil {
		panic("gmailSvcMock.ListMessagesFunc: method is nil but gmailSvc.ListMessages was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Q          string
		PageToken  string
		MaxResults int64
	}{
		Ctx:        ctx,
		Q:          Q,
		PageToken:  pageToken,
		MaxResults: maxResults,
	}
	mock.lockListMessages.Lock()
	mock.calls.ListMessages = append(mock.calls.ListMessages, callInfo)
	mock.lockListMessages.Unlock()
	return mock.ListMessagesFunc(ctx, Q, pageToken, maxResults)
}

// ListMessagesCalls gets all the calls that were made to ListMessages.
// Check the length with:
//
//	len(mockedgmailSvc.ListMessagesCalls())
func (mock *gmailSvcMock) ListMessagesCalls() []struct {
	Ctx        context.Context
	Q          string
	PageToken  string
	MaxResults int64
} {
	var calls []struct {
		Ctx        context.Context
		Q          string
		PageToken  string
		MaxResults int64
	}
	mock.lockListMessages.RLock()
	calls = mock.calls.ListMessages
	mock.lockListMessages.RUnlock()
	return calls
}
