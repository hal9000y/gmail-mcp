name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CI_IMAGE_VERSION: v4
  CI_IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/gmail-mcp-ci

jobs:
  build-test-image:
    name: Build Test Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - uses: actions/checkout@v5

      - name: Set image output
        id: image
        run: echo "image=${{ env.CI_IMAGE_REPO }}:${{ env.CI_IMAGE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Check version cache
        id: cache-version
        uses: actions/cache@v4
        with:
          path: .ci-image-version
          key: ci-image-${{ env.CI_IMAGE_VERSION }}

      - name: Set up Docker Buildx
        if: steps.cache-version.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.cache-version.outputs.cache-hit != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        if: steps.cache-version.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ci
          push: true
          tags: ${{ env.CI_IMAGE_REPO }}:${{ env.CI_IMAGE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Mark version as built
        if: steps.cache-version.outputs.cache-hit != 'true'
        run: echo "${{ env.CI_IMAGE_VERSION }}" > .ci-image-version

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build-test-image
    container:
      image: ${{ needs.build-test-image.outputs.image }}
    steps:
      - uses: actions/checkout@v5

      - name: Run tests
        run: go test -mod=vendor -v -race ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true

      - name: Build
        run: go build -mod=vendor -v ./cmd/gmail-mcp

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: ./codeql-pack/go-security-and-quality.qls

      - name: Build project for CodeQL
        run: go build ./...

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"
          output: ./codeql-results
          upload: false  # Don't upload to GitHub code scanning

      - name: Process and display results
        if: always()
        run: |
          if [ -d "./codeql-results" ]; then
            sarif_file=$(find ./codeql-results -name "*.sarif" -type f | head -1)
            if [ -n "$sarif_file" ]; then
              echo "## CodeQL Analysis Results" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              # Count issues by severity
              error_count=$(jq -r '[.runs[].results[] | select(.level == "error")] | length' "$sarif_file")
              warning_count=$(jq -r '[.runs[].results[] | select(.level == "warning")] | length' "$sarif_file")
              note_count=$(jq -r '[.runs[].results[] | select(.level == "note" or .level == "recommendation")] | length' "$sarif_file")

              echo "### Summary" >> $GITHUB_STEP_SUMMARY
              echo "- üî¥ **Errors:** $error_count" >> $GITHUB_STEP_SUMMARY
              echo "- üü° **Warnings:** $warning_count" >> $GITHUB_STEP_SUMMARY
              echo "- üîµ **Notes:** $note_count" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              # Display in logs
              echo "================================================"
              echo "CodeQL Analysis Results:"
              echo "  Errors: $error_count"
              echo "  Warnings: $warning_count"
              echo "  Notes: $note_count"
              echo "================================================"

              # Show details of errors and warnings
              if [ "$error_count" -gt 0 ] || [ "$warning_count" -gt 0 ]; then
                echo "### Issues Found" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                jq -r '.runs[].results[] |
                  select(.level == "error" or .level == "warning") |
                  "[\(.level | ascii_upcase)] \(.locations[0].physicalLocation.artifactLocation.uri // "unknown"):\(.locations[0].physicalLocation.region.startLine // "?"): \(.message.text // "No message")"' \
                  "$sarif_file" | tee -a $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY

                # Also output to logs
                echo ""
                echo "Detailed issues:"
                jq -r '.runs[].results[] |
                  select(.level == "error" or .level == "warning") |
                  "[\(.level | ascii_upcase)] \(.locations[0].physicalLocation.artifactLocation.uri // "unknown"):\(.locations[0].physicalLocation.region.startLine // "?"): \(.message.text // "No message")"' \
                  "$sarif_file"
              fi

              # Create summary file for artifact
              {
                echo "CodeQL Analysis Results"
                echo "======================="
                echo "Errors: $error_count"
                echo "Warnings: $warning_count"
                echo "Notes: $note_count"
                echo ""
                jq -r '.runs[].results[] | "[\(.level | ascii_upcase)] \(.locations[0].physicalLocation.artifactLocation.uri // "unknown"):\(.locations[0].physicalLocation.region.startLine // "?"): \(.message.text // "No message")"' "$sarif_file"
              } > codeql-summary.txt

              # Fail if errors found
              if [ "$error_count" -gt 0 ]; then
                echo ""
                echo "‚ùå Build failed due to $error_count error(s) found by CodeQL"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è No SARIF file found in results"
            fi
          else
            echo "‚ö†Ô∏è No CodeQL results directory found"
          fi

      - name: Upload CodeQL results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: |
            ./codeql-results/
            ./codeql-summary.txt